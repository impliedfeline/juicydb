var data = {lines:[
{"lineNum":"    1","line":"use crate::db::*;"},
{"lineNum":"    2","line":"use std::convert::TryInto;"},
{"lineNum":"    3","line":"use std::fmt;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"/// Datatype representing an SQL-statement."},
{"lineNum":"    6","line":"#[derive(Debug, PartialEq)]","class":"linePartCov","hits":"6","order":"4440","possible_hits":"25",},
{"lineNum":"    7","line":"pub enum Statement {"},
{"lineNum":"    8","line":"    Select {"},
{"lineNum":"    9","line":"        columns: Vec<Identifier>,","class":"linePartCov","hits":"3","order":"5347","possible_hits":"7",},
{"lineNum":"   10","line":"        table: Identifier,","class":"linePartCov","hits":"4","order":"5348","possible_hits":"9",},
{"lineNum":"   11","line":"        condition: Option<Condition>,","class":"linePartCov","hits":"5","order":"5349","possible_hits":"11",},
{"lineNum":"   12","line":"    },"},
{"lineNum":"   13","line":"    CreateTable {"},
{"lineNum":"   14","line":"        table: Identifier,","class":"linePartCov","hits":"3","order":"4441","possible_hits":"8",},
{"lineNum":"   15","line":"        columns: Vec<(Identifier, DBType)>,","class":"linePartCov","hits":"4","order":"4442","possible_hits":"10",},
{"lineNum":"   16","line":"    },"},
{"lineNum":"   17","line":"    InsertInto {"},
{"lineNum":"   18","line":"        table: Identifier,","class":"linePartCov","hits":"3","order":"5266","possible_hits":"8",},
{"lineNum":"   19","line":"        values: Vec<DBValue>,","class":"linePartCov","hits":"4","order":"5267","possible_hits":"10",},
{"lineNum":"   20","line":"    },"},
{"lineNum":"   21","line":"}"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"type Identifier = String;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// Condition in a \'where\'-clause of certain SQL-statements. Essentially an"},
{"lineNum":"   26","line":"/// AST representing different kinds of logical formulas one can get combining field selectors"},
{"lineNum":"   27","line":"/// (table.column) and (in)equalities."},
{"lineNum":"   28","line":"#[derive(Debug, PartialEq)]","class":"lineNoCov","hits":"0","possible_hits":"23",},
{"lineNum":"   29","line":"pub enum Condition {"},
{"lineNum":"   30","line":"    Literal(ConditionLiteral),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   31","line":"    Not(Box<Condition>),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   32","line":"    And(Box<Condition>, Box<Condition>),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   33","line":"    Or(Box<Condition>, Box<Condition>),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"/// Field selector, e.g. table.column"},
{"lineNum":"   37","line":"#[derive(Debug, PartialEq)]","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   38","line":"pub struct Selector {"},
{"lineNum":"   39","line":"    table: Identifier,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   40","line":"    field: Identifier,","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   41","line":"}"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"/// \'Literal\' in a [`Condition`] AST. Essentially some form of (in)equality"},
{"lineNum":"   44","line":"/// over a database field selector."},
{"lineNum":"   45","line":"#[derive(Debug, PartialEq)]","class":"lineNoCov","hits":"0","possible_hits":"39",},
{"lineNum":"   46","line":"pub enum ConditionLiteral {"},
{"lineNum":"   47","line":"    Eq(Selector, Selector),","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   48","line":"    Neq(Selector, Selector),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   49","line":"    Lt(Selector, Selector),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   50","line":"    Lte(Selector, Selector),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   51","line":"    Gt(Selector, Selector),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   52","line":"    Gte(Selector, Selector),","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"/// Datatype for meta-commands accepted by the juicydb REPL."},
{"lineNum":"   56","line":"#[derive(Debug, PartialEq)]","class":"linePartCov","hits":"2","order":"5272","possible_hits":"4",},
{"lineNum":"   57","line":"pub enum MetaCommand {"},
{"lineNum":"   58","line":"    Exit,"},
{"lineNum":"   59","line":"    Print,"},
{"lineNum":"   60","line":"}"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"/// A user-provided command to the juicydb REPL. Either a [`MetaCommand`] or an SQL-[`Statement`]"},
{"lineNum":"   63","line":"#[derive(Debug, PartialEq)]","class":"linePartCov","hits":"2","order":"4438","possible_hits":"11",},
{"lineNum":"   64","line":"pub enum Command {"},
{"lineNum":"   65","line":"    MetaCommand(MetaCommand),","class":"linePartCov","hits":"1","order":"5271","possible_hits":"3",},
{"lineNum":"   66","line":"    Statement(Statement),","class":"linePartCov","hits":"1","order":"4439","possible_hits":"4",},
{"lineNum":"   67","line":"}"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"/// Parser wrapper for string data"},
{"lineNum":"   70","line":"pub struct Parser<\'a> {"},
{"lineNum":"   71","line":"    input: &\'a str,"},
{"lineNum":"   72","line":"}"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"#[derive(Debug, PartialEq)]","class":"linePartCov","hits":"2","order":"5191","possible_hits":"4",},
{"lineNum":"   75","line":"pub enum ParseError {"},
{"lineNum":"   76","line":"    FailedToLex,"},
{"lineNum":"   77","line":"    InvalidIdentifier,"},
{"lineNum":"   78","line":"    InvalidValue,"},
{"lineNum":"   79","line":"    EndOfInput,"},
{"lineNum":"   80","line":"    MissingSemicolon,"},
{"lineNum":"   81","line":"    MissingLParen,"},
{"lineNum":"   82","line":"    MissingRParen,"},
{"lineNum":"   83","line":"    MissingComma,"},
{"lineNum":"   84","line":"    UnrecognizedMetaCommand,"},
{"lineNum":"   85","line":"    UnrecognizedStatement,"},
{"lineNum":"   86","line":"    UnrecognizedType,"},
{"lineNum":"   87","line":"    RunawayText,"},
{"lineNum":"   88","line":"    MissingFrom,"},
{"lineNum":"   89","line":"    MissingType,"},
{"lineNum":"   90","line":"}"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"impl ParseError {"},
{"lineNum":"   93","line":"    fn ignore_fail(self) -> Result<(), ParseError> {","class":"lineCov","hits":"1","order":"4021","possible_hits":"1",},
{"lineNum":"   94","line":"        if let ParseError::FailedToLex = self {","class":"lineCov","hits":"2","order":"4022","possible_hits":"2",},
{"lineNum":"   95","line":"            Ok(())","class":"lineCov","hits":"1","order":"4023","possible_hits":"1",},
{"lineNum":"   96","line":"        } else {"},
{"lineNum":"   97","line":"            Err(self)","class":"lineCov","hits":"1","order":"5228","possible_hits":"1",},
{"lineNum":"   98","line":"        }"},
{"lineNum":"   99","line":"    }","class":"linePartCov","hits":"1","order":"4024","possible_hits":"2",},
{"lineNum":"  100","line":"}"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"impl fmt::Display for ParseError {"},
{"lineNum":"  103","line":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"        match self {","class":"lineNoCov","hits":"0","possible_hits":"15",},
{"lineNum":"  105","line":"            Self::FailedToLex => write!(f, \"Failed to lex\"),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":"            Self::InvalidIdentifier => write!(f, \"Invalid identifier\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"            Self::EndOfInput => write!(f, \"Unexpected end of input\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"            Self::MissingSemicolon => write!(f, \"Missing semicolon\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"            Self::MissingLParen => write!(f, \"Missing left parenthesis from column list\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  110","line":"            Self::MissingRParen => write!(f, \"Missing right parenthesis from column list\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"            Self::MissingComma => write!(f, \"Missing comma from column list\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"            Self::UnrecognizedMetaCommand => write!(f, \"Unrecognized meta-command\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"            Self::UnrecognizedStatement => write!(f, \"Unrecognized SQL statement\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"            Self::UnrecognizedType => write!(f, \"Unrecognized data type\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"            Self::RunawayText => write!(f, \"No closing delimiter for text\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"            Self::InvalidValue => write!(f, \"Invalid value\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"            Self::MissingFrom => write!(f, \"Missing \'from\' clause in \'select\'-statement\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"            Self::MissingType => write!(f, \"Missing type in column list\"),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"        }"},
{"lineNum":"  120","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"fn char_to_i64(input: char) -> i64 {","class":"lineCov","hits":"1","order":"5116","possible_hits":"1",},
{"lineNum":"  124","line":"    match input {","class":"linePartCov","hits":"1","order":"5118","possible_hits":"9",},
{"lineNum":"  125","line":"        \'0\' => 0,","class":"lineCov","hits":"2","order":"5117","possible_hits":"2",},
{"lineNum":"  126","line":"        \'1\' => 1,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"        \'2\' => 2,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"        \'3\' => 3,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"        \'4\' => 4,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"        \'5\' => 5,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"        \'6\' => 6,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"        \'7\' => 7,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  133","line":"        \'8\' => 8,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  134","line":"        \'9\' => 9,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"        _ => panic!(\"Not a valid digit\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":"}","class":"linePartCov","hits":"1","order":"5119","possible_hits":"2",},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"fn str_to_i64(input: &str) -> i64 {","class":"lineCov","hits":"1","order":"5069","possible_hits":"1",},
{"lineNum":"  140","line":"    let mut val = 0;","class":"lineCov","hits":"1","order":"5070","possible_hits":"1",},
{"lineNum":"  141","line":"    for (i, c) in input.chars().rev().enumerate() {","class":"linePartCov","hits":"2","order":"5071","possible_hits":"3",},
{"lineNum":"  142","line":"        if c.is_ascii_digit() {","class":"lineCov","hits":"2","order":"5114","possible_hits":"2",},
{"lineNum":"  143","line":"            val += char_to_i64(c) * 10_i64.pow(i.try_into().unwrap());","class":"linePartCov","hits":"1","order":"5115","possible_hits":"2",},
{"lineNum":"  144","line":"        } else if c == \'-\' && i == input.len() - 1 {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  145","line":"            val = -val;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  146","line":"        } else {"},
{"lineNum":"  147","line":"            panic!(\"Not a valid integer\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"        }"},
{"lineNum":"  149","line":"    }"},
{"lineNum":"  150","line":"    val","class":"lineCov","hits":"1","order":"5135","possible_hits":"1",},
{"lineNum":"  151","line":"}","class":"lineCov","hits":"1","order":"5136","possible_hits":"1",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"type ParseResult<T> = Result<T, ParseError>;"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"impl<\'a> Parser<\'a> {"},
{"lineNum":"  156","line":"    pub fn new(input: &\'a str) -> Self {","class":"lineCov","hits":"1","order":"3814","possible_hits":"1",},
{"lineNum":"  157","line":"        Self { input }","class":"lineCov","hits":"1","order":"3815","possible_hits":"1",},
{"lineNum":"  158","line":"    }","class":"linePartCov","hits":"1","order":"3816","possible_hits":"2",},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    fn skip_whitespace(&mut self) {","class":"lineCov","hits":"1","order":"3823","possible_hits":"1",},
{"lineNum":"  161","line":"        let count = self.input.chars().take_while(|c| c.is_whitespace()).count();","class":"lineCov","hits":"3","order":"3824","possible_hits":"3",},
{"lineNum":"  162","line":"        let (_, input) = self.input.split_at(count);","class":"lineCov","hits":"1","order":"3937","possible_hits":"1",},
{"lineNum":"  163","line":"        self.input = input;","class":"lineCov","hits":"1","order":"3968","possible_hits":"1",},
{"lineNum":"  164","line":"    }","class":"linePartCov","hits":"1","order":"3969","possible_hits":"2",},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    fn lex_string(&mut self, string: &str) -> ParseResult<()> {","class":"lineCov","hits":"1","order":"3821","possible_hits":"1",},
{"lineNum":"  167","line":"        self.skip_whitespace();","class":"lineCov","hits":"1","order":"3822","possible_hits":"1",},
{"lineNum":"  168","line":"        if self.input.starts_with(string) {","class":"lineCov","hits":"3","order":"3970","possible_hits":"3",},
{"lineNum":"  169","line":"            let (_, input) = self.input.split_at(string.len());","class":"lineCov","hits":"1","order":"4036","possible_hits":"1",},
{"lineNum":"  170","line":"            self.input = input;","class":"lineCov","hits":"1","order":"4048","possible_hits":"1",},
{"lineNum":"  171","line":"            Ok(())","class":"lineCov","hits":"1","order":"4049","possible_hits":"1",},
{"lineNum":"  172","line":"        } else {"},
{"lineNum":"  173","line":"            if self.input.is_empty() {","class":"lineCov","hits":"3","order":"4003","possible_hits":"3",},
{"lineNum":"  174","line":"                Err(ParseError::EndOfInput)","class":"lineCov","hits":"1","order":"5031","possible_hits":"1",},
{"lineNum":"  175","line":"            } else {"},
{"lineNum":"  176","line":"                Err(ParseError::FailedToLex)","class":"lineCov","hits":"1","order":"4007","possible_hits":"1",},
{"lineNum":"  177","line":"            }"},
{"lineNum":"  178","line":"        }"},
{"lineNum":"  179","line":"    }","class":"linePartCov","hits":"1","order":"4008","possible_hits":"2",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    fn lex_identifier(&mut self) -> ParseResult<Identifier> {","class":"lineCov","hits":"1","order":"4062","possible_hits":"1",},
{"lineNum":"  182","line":"        self.skip_whitespace();","class":"lineCov","hits":"1","order":"4063","possible_hits":"1",},
{"lineNum":"  183","line":"        let mut chars = self.input.chars();","class":"lineCov","hits":"1","order":"4064","possible_hits":"1",},
{"lineNum":"  184","line":"        if let Some(c) = chars.nth(0) {","class":"linePartCov","hits":"2","order":"4065","possible_hits":"3",},
{"lineNum":"  185","line":"            if c.is_ascii_alphabetic() {","class":"lineCov","hits":"2","order":"4078","possible_hits":"2",},
{"lineNum":"  186","line":"                let count = 1 + chars","class":"linePartCov","hits":"1","order":"4089","possible_hits":"3",},
{"lineNum":"  187","line":"                    .take_while(|&c| c.is_ascii_alphanumeric() || c == \'_\')","class":"lineCov","hits":"2","order":"4090","possible_hits":"2",},
{"lineNum":"  188","line":"                    .count();"},
{"lineNum":"  189","line":"                let (parsed, input) = self.input.split_at(count);","class":"lineCov","hits":"1","order":"4099","possible_hits":"1",},
{"lineNum":"  190","line":"                self.input = input;","class":"lineCov","hits":"1","order":"4100","possible_hits":"1",},
{"lineNum":"  191","line":"                Ok(String::from(parsed))","class":"lineCov","hits":"1","order":"4101","possible_hits":"1",},
{"lineNum":"  192","line":"            } else {"},
{"lineNum":"  193","line":"                Err(ParseError::InvalidIdentifier)","class":"lineCov","hits":"1","order":"5243","possible_hits":"1",},
{"lineNum":"  194","line":"            }"},
{"lineNum":"  195","line":"        } else {"},
{"lineNum":"  196","line":"            Err(ParseError::EndOfInput)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  197","line":"        }"},
{"lineNum":"  198","line":"    }","class":"lineCov","hits":"1","order":"4270","possible_hits":"1",},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    fn parse_text(&mut self) -> ParseResult<String> {","class":"lineCov","hits":"1","order":"5217","possible_hits":"1",},
{"lineNum":"  201","line":"        let mut chars = self.input.chars();","class":"lineCov","hits":"1","order":"5218","possible_hits":"1",},
{"lineNum":"  202","line":"        if let Some(c) = chars.nth(0) {","class":"linePartCov","hits":"2","order":"5219","possible_hits":"3",},
{"lineNum":"  203","line":"            if c == \'\\\'\' {","class":"lineCov","hits":"3","order":"5220","possible_hits":"3",},
{"lineNum":"  204","line":"                let count = 1 + chars.take_while(|&c| c != \'\\\'\').count();","class":"linePartCov","hits":"3","order":"5306","possible_hits":"4",},
{"lineNum":"  205","line":"                if let Some(\'\\\'\') = self.input.chars().nth(count) {","class":"linePartCov","hits":"1","order":"5307","possible_hits":"2",},
{"lineNum":"  206","line":"                    let (parsed, input) = self.input.split_at(count + 1);","class":"linePartCov","hits":"2","order":"5309","possible_hits":"4",},
{"lineNum":"  207","line":"                    self.input = input;","class":"lineCov","hits":"1","order":"5310","possible_hits":"1",},
{"lineNum":"  208","line":"                    Ok(String::from(&parsed[1..count]))","class":"lineCov","hits":"1","order":"5311","possible_hits":"1",},
{"lineNum":"  209","line":"                } else {"},
{"lineNum":"  210","line":"                    Err(ParseError::RunawayText)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"                }"},
{"lineNum":"  212","line":"            } else {"},
{"lineNum":"  213","line":"                Err(ParseError::FailedToLex)","class":"lineCov","hits":"1","order":"5221","possible_hits":"1",},
{"lineNum":"  214","line":"            }"},
{"lineNum":"  215","line":"        } else {"},
{"lineNum":"  216","line":"            Err(ParseError::EndOfInput)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":"    }","class":"lineCov","hits":"1","order":"5222","possible_hits":"1",},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"    fn parse_positive_integer(&mut self) -> ParseResult<i64> {","class":"lineCov","hits":"1","order":"5056","possible_hits":"1",},
{"lineNum":"  221","line":"        let count = self","class":"lineCov","hits":"1","order":"5057","possible_hits":"1",},
{"lineNum":"  222","line":"            .input"},
{"lineNum":"  223","line":"            .chars()"},
{"lineNum":"  224","line":"            .take_while(|&c| c.is_ascii_digit())","class":"lineCov","hits":"2","order":"5058","possible_hits":"2",},
{"lineNum":"  225","line":"            .count();"},
{"lineNum":"  226","line":"        if count > 0 {","class":"lineCov","hits":"2","order":"5065","possible_hits":"2",},
{"lineNum":"  227","line":"            let (parsed, input) = self.input.split_at(count);","class":"lineCov","hits":"1","order":"5066","possible_hits":"1",},
{"lineNum":"  228","line":"            self.input = input;","class":"lineCov","hits":"1","order":"5067","possible_hits":"1",},
{"lineNum":"  229","line":"            Ok(str_to_i64(parsed))","class":"lineCov","hits":"1","order":"5068","possible_hits":"1",},
{"lineNum":"  230","line":"        } else {"},
{"lineNum":"  231","line":"            Err(ParseError::FailedToLex)","class":"lineCov","hits":"1","order":"5208","possible_hits":"1",},
{"lineNum":"  232","line":"        }"},
{"lineNum":"  233","line":"    }","class":"linePartCov","hits":"1","order":"5137","possible_hits":"2",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"    fn parse_negative_integer(&mut self) -> ParseResult<i64> {","class":"lineCov","hits":"1","order":"5209","possible_hits":"1",},
{"lineNum":"  236","line":"        let mut chars = self.input.chars();","class":"lineCov","hits":"1","order":"5210","possible_hits":"1",},
{"lineNum":"  237","line":"        if let Some(c) = chars.nth(0) {","class":"linePartCov","hits":"2","order":"5211","possible_hits":"3",},
{"lineNum":"  238","line":"            if c == \'-\' {","class":"lineCov","hits":"3","order":"5212","possible_hits":"3",},
{"lineNum":"  239","line":"                let count = chars.take_while(|&c| c.is_ascii_digit()).count();","class":"lineCov","hits":"3","order":"5232","possible_hits":"3",},
{"lineNum":"  240","line":"                if count > 0 {","class":"lineCov","hits":"2","order":"5233","possible_hits":"2",},
{"lineNum":"  241","line":"                    let (parsed, input) = self.input.split_at(count + 1);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  242","line":"                    self.input = input;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"                    Ok(str_to_i64(parsed))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"                } else {"},
{"lineNum":"  245","line":"                    Err(ParseError::FailedToLex)","class":"lineCov","hits":"1","order":"5234","possible_hits":"1",},
{"lineNum":"  246","line":"                }"},
{"lineNum":"  247","line":"            } else {"},
{"lineNum":"  248","line":"                Err(ParseError::FailedToLex)","class":"lineCov","hits":"1","order":"5213","possible_hits":"1",},
{"lineNum":"  249","line":"            }"},
{"lineNum":"  250","line":"        } else {"},
{"lineNum":"  251","line":"            Err(ParseError::EndOfInput)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"        }"},
{"lineNum":"  253","line":"    }","class":"lineCov","hits":"1","order":"5214","possible_hits":"1",},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"    fn parse_integer(&mut self) -> ParseResult<i64> {","class":"lineCov","hits":"1","order":"5054","possible_hits":"1",},
{"lineNum":"  256","line":"        self.parse_positive_integer()","class":"lineCov","hits":"2","order":"5055","possible_hits":"2",},
{"lineNum":"  257","line":"            .or_else(|_| self.parse_negative_integer())","class":"lineCov","hits":"3","order":"5138","possible_hits":"3",},
{"lineNum":"  258","line":"    }","class":"linePartCov","hits":"1","order":"5139","possible_hits":"2",},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    pub fn parse_command(&mut self) -> ParseResult<Command> {","class":"lineCov","hits":"1","order":"3817","possible_hits":"1",},
{"lineNum":"  261","line":"        self.parse_meta_command()","class":"lineCov","hits":"2","order":"3818","possible_hits":"2",},
{"lineNum":"  262","line":"            .map(|cmd| Command::MetaCommand(cmd))","class":"lineCov","hits":"2","order":"5268","possible_hits":"2",},
{"lineNum":"  263","line":"            .or_else(|e| {","class":"lineCov","hits":"2","order":"4016","possible_hits":"2",},
{"lineNum":"  264","line":"                e.ignore_fail()?;","class":"linePartCov","hits":"1","order":"4020","possible_hits":"2",},
{"lineNum":"  265","line":"                self.parse_statement().map(|stmt| Command::Statement(stmt))","class":"lineCov","hits":"3","order":"4025","possible_hits":"3",},
{"lineNum":"  266","line":"            })","class":"linePartCov","hits":"2","order":"4427","possible_hits":"3",},
{"lineNum":"  267","line":"    }","class":"linePartCov","hits":"1","order":"4428","possible_hits":"2",},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"    fn parse_meta_command(&mut self) -> ParseResult<MetaCommand> {","class":"lineCov","hits":"1","order":"3819","possible_hits":"1",},
{"lineNum":"  270","line":"        self.lex_string(\".\")?;","class":"lineCov","hits":"2","order":"3820","possible_hits":"2",},
{"lineNum":"  271","line":"        self.lex_string(\"exit\")","class":"lineCov","hits":"2","order":"5255","possible_hits":"2",},
{"lineNum":"  272","line":"            .map(|_| MetaCommand::Exit)","class":"linePartCov","hits":"2","order":"5277","possible_hits":"3",},
{"lineNum":"  273","line":"            .or_else(|e| {","class":"lineCov","hits":"2","order":"5256","possible_hits":"2",},
{"lineNum":"  274","line":"                e.ignore_fail()?;","class":"linePartCov","hits":"1","order":"5260","possible_hits":"2",},
{"lineNum":"  275","line":"                self.lex_string(\"print\").map(|_| MetaCommand::Print)","class":"linePartCov","hits":"3","order":"5261","possible_hits":"4",},
{"lineNum":"  276","line":"            })","class":"linePartCov","hits":"2","order":"5264","possible_hits":"3",},
{"lineNum":"  277","line":"            .map_err(|_| ParseError::UnrecognizedMetaCommand)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  278","line":"    }","class":"linePartCov","hits":"2","order":"4014","possible_hits":"3",},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"    fn parse_semicolon(&mut self) -> ParseResult<()> {","class":"lineCov","hits":"1","order":"4421","possible_hits":"1",},
{"lineNum":"  281","line":"        self.lex_string(\";\")","class":"lineCov","hits":"1","order":"4422","possible_hits":"1",},
{"lineNum":"  282","line":"            .map(|_| ())","class":"linePartCov","hits":"1","order":"4423","possible_hits":"2",},
{"lineNum":"  283","line":"            .map_err(|_| ParseError::MissingSemicolon)","class":"linePartCov","hits":"2","order":"5037","possible_hits":"3",},
{"lineNum":"  284","line":"    }","class":"linePartCov","hits":"1","order":"4424","possible_hits":"2",},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"    fn parse_statement(&mut self) -> ParseResult<Statement> {","class":"linePartCov","hits":"1","order":"4026","possible_hits":"2",},
{"lineNum":"  287","line":"        let stmt = self","class":"linePartCov","hits":"4","order":"4027","possible_hits":"5",},
{"lineNum":"  288","line":"            .parse_select()"},
{"lineNum":"  289","line":"            .or_else(|e| {","class":"lineCov","hits":"2","order":"4031","possible_hits":"2",},
{"lineNum":"  290","line":"                e.ignore_fail()?;","class":"lineCov","hits":"2","order":"4032","possible_hits":"2",},
{"lineNum":"  291","line":"                self.parse_create_table()","class":"lineCov","hits":"1","order":"4033","possible_hits":"1",},
{"lineNum":"  292","line":"            })","class":"linePartCov","hits":"2","order":"4417","possible_hits":"3",},
{"lineNum":"  293","line":"            .or_else(|e| {","class":"lineCov","hits":"2","order":"4418","possible_hits":"2",},
{"lineNum":"  294","line":"                e.ignore_fail()?;","class":"lineCov","hits":"2","order":"5040","possible_hits":"2",},
{"lineNum":"  295","line":"                self.parse_insert_into()","class":"lineCov","hits":"1","order":"5041","possible_hits":"1",},
{"lineNum":"  296","line":"            })","class":"linePartCov","hits":"2","order":"5151","possible_hits":"3",},
{"lineNum":"  297","line":"            .or_else(|e| {","class":"lineCov","hits":"1","order":"5226","possible_hits":"1",},
{"lineNum":"  298","line":"                e.ignore_fail()?;","class":"lineCov","hits":"2","order":"5227","possible_hits":"2",},
{"lineNum":"  299","line":"                Err(ParseError::UnrecognizedStatement)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"            })?;","class":"linePartCov","hits":"4","order":"4419","possible_hits":"7",},
{"lineNum":"  301","line":"        self.parse_semicolon()?;","class":"lineCov","hits":"3","order":"4420","possible_hits":"3",},
{"lineNum":"  302","line":"        Ok(stmt)","class":"lineCov","hits":"1","order":"4425","possible_hits":"1",},
{"lineNum":"  303","line":"    }","class":"linePartCov","hits":"3","order":"4426","possible_hits":"4",},
{"lineNum":"  304","line":""},
{"lineNum":"  305","line":"    fn parse_select(&mut self) -> ParseResult<Statement> {","class":"linePartCov","hits":"1","order":"4028","possible_hits":"2",},
{"lineNum":"  306","line":"        self.lex_string(\"select\")?;","class":"lineCov","hits":"3","order":"4029","possible_hits":"3",},
{"lineNum":"  307","line":"        let columns = self.parse_columns()?;","class":"linePartCov","hits":"2","order":"5010","possible_hits":"3",},
{"lineNum":"  308","line":"        self.lex_string(\"from\")","class":"linePartCov","hits":"2","order":"5019","possible_hits":"3",},
{"lineNum":"  309","line":"            .map_err(|_| ParseError::MissingFrom)?;","class":"linePartCov","hits":"1","order":"5020","possible_hits":"6",},
{"lineNum":"  310","line":"        let table = self.lex_identifier()?;","class":"linePartCov","hits":"1","order":"5021","possible_hits":"3",},
{"lineNum":"  311","line":"        let condition = if let Ok(_) = self.lex_string(\"where\") {","class":"lineCov","hits":"3","order":"5030","possible_hits":"3",},
{"lineNum":"  312","line":"            Some(self.parse_condition()?)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  313","line":"        } else {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  314","line":"            None","class":"lineCov","hits":"1","order":"5032","possible_hits":"1",},
{"lineNum":"  315","line":"        };"},
{"lineNum":"  316","line":"        Ok(Statement::Select {","class":"lineCov","hits":"1","order":"5036","possible_hits":"1",},
{"lineNum":"  317","line":"            columns,","class":"lineCov","hits":"1","order":"5033","possible_hits":"1",},
{"lineNum":"  318","line":"            table: String::from(table),","class":"lineCov","hits":"1","order":"5034","possible_hits":"1",},
{"lineNum":"  319","line":"            condition,","class":"lineCov","hits":"1","order":"5035","possible_hits":"1",},
{"lineNum":"  320","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"    }","class":"linePartCov","hits":"3","order":"4030","possible_hits":"11",},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    fn parse_left_paren(&mut self) -> ParseResult<()> {","class":"lineCov","hits":"1","order":"4274","possible_hits":"1",},
{"lineNum":"  324","line":"        self.lex_string(\"(\").map_err(|_| ParseError::MissingLParen)","class":"linePartCov","hits":"1","order":"4275","possible_hits":"4",},
{"lineNum":"  325","line":"    }","class":"linePartCov","hits":"1","order":"4279","possible_hits":"2",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    fn parse_right_paren(&mut self) -> ParseResult<()> {","class":"lineCov","hits":"1","order":"4410","possible_hits":"1",},
{"lineNum":"  328","line":"        self.lex_string(\")\").map_err(|_| {","class":"linePartCov","hits":"1","order":"4411","possible_hits":"2",},
{"lineNum":"  329","line":"            if let Ok(_) = self.lex_identifier() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  330","line":"                ParseError::MissingComma","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"            } else {"},
{"lineNum":"  332","line":"                ParseError::MissingRParen","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"            }"},
{"lineNum":"  334","line":"        })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"    }","class":"linePartCov","hits":"1","order":"4412","possible_hits":"2",},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    fn parse_columns(&mut self) -> ParseResult<Vec<Identifier>> {","class":"linePartCov","hits":"1","order":"5011","possible_hits":"2",},
{"lineNum":"  338","line":"        self.parse_left_paren()?;","class":"linePartCov","hits":"2","order":"5012","possible_hits":"3",},
{"lineNum":"  339","line":"        let ident = self.lex_identifier()?;","class":"linePartCov","hits":"2","order":"5013","possible_hits":"3",},
{"lineNum":"  340","line":"        let mut columns = vec![ident];","class":"lineCov","hits":"1","order":"5014","possible_hits":"1",},
{"lineNum":"  341","line":"        while let Ok(_) = self.lex_string(\",\") {","class":"lineCov","hits":"3","order":"5015","possible_hits":"3",},
{"lineNum":"  342","line":"            let ident = self.lex_identifier()?;","class":"linePartCov","hits":"1","order":"5341","possible_hits":"4",},
{"lineNum":"  343","line":"            columns.push(ident);","class":"lineCov","hits":"1","order":"5343","possible_hits":"1",},
{"lineNum":"  344","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  345","line":"        self.parse_right_paren()?;","class":"lineCov","hits":"2","order":"5016","possible_hits":"2",},
{"lineNum":"  346","line":"        Ok(columns)","class":"lineCov","hits":"1","order":"5017","possible_hits":"1",},
{"lineNum":"  347","line":"    }","class":"linePartCov","hits":"3","order":"5018","possible_hits":"7",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    fn parse_column_pairs(&mut self) -> ParseResult<Vec<(Identifier, DBType)>> {","class":"linePartCov","hits":"1","order":"4272","possible_hits":"2",},
{"lineNum":"  350","line":"        self.parse_left_paren()?;","class":"linePartCov","hits":"2","order":"4273","possible_hits":"3",},
{"lineNum":"  351","line":"        let ident = self.lex_identifier()?;","class":"linePartCov","hits":"1","order":"4280","possible_hits":"3",},
{"lineNum":"  352","line":"        let db_type = self.parse_db_type()?;","class":"linePartCov","hits":"2","order":"4281","possible_hits":"3",},
{"lineNum":"  353","line":"        let mut columns = vec![(ident, db_type)];","class":"lineCov","hits":"1","order":"4290","possible_hits":"1",},
{"lineNum":"  354","line":"        while let Ok(_) = self.lex_string(\",\") {","class":"lineCov","hits":"3","order":"4332","possible_hits":"3",},
{"lineNum":"  355","line":"            let ident = self.lex_identifier()?;","class":"linePartCov","hits":"1","order":"4333","possible_hits":"4",},
{"lineNum":"  356","line":"            let db_type = self.parse_db_type()?;","class":"linePartCov","hits":"2","order":"4334","possible_hits":"3",},
{"lineNum":"  357","line":"            columns.push((ident, db_type));","class":"lineCov","hits":"1","order":"4335","possible_hits":"1",},
{"lineNum":"  358","line":"        }","class":"linePartCov","hits":"1","order":"4406","possible_hits":"5",},
{"lineNum":"  359","line":"        self.parse_right_paren()?;","class":"lineCov","hits":"2","order":"4409","possible_hits":"2",},
{"lineNum":"  360","line":"        Ok(columns)","class":"lineCov","hits":"1","order":"4413","possible_hits":"1",},
{"lineNum":"  361","line":"    }","class":"linePartCov","hits":"2","order":"4414","possible_hits":"8",},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    fn parse_db_type(&mut self) -> ParseResult<DBType> {","class":"lineCov","hits":"1","order":"4282","possible_hits":"1",},
{"lineNum":"  364","line":"        self.lex_string(\"integer\")","class":"lineCov","hits":"2","order":"4283","possible_hits":"2",},
{"lineNum":"  365","line":"            .map(|_| DBType::Integer)","class":"linePartCov","hits":"2","order":"4284","possible_hits":"3",},
{"lineNum":"  366","line":"            .or_else(|_| self.lex_string(\"text\").map(|_| DBType::Text))","class":"lineCov","hits":"5","order":"4286","possible_hits":"5",},
{"lineNum":"  367","line":"            .map_err(|e| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"                if let ParseError::EndOfInput = e {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  369","line":"                    ParseError::MissingType","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"                } else {"},
{"lineNum":"  371","line":"                    ParseError::UnrecognizedType","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"                }"},
{"lineNum":"  373","line":"            })","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  374","line":"    }","class":"linePartCov","hits":"1","order":"4289","possible_hits":"2",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    fn parse_create_table(&mut self) -> ParseResult<Statement> {","class":"linePartCov","hits":"1","order":"4034","possible_hits":"2",},
{"lineNum":"  377","line":"        self.lex_string(\"create\")?;","class":"lineCov","hits":"3","order":"4035","possible_hits":"3",},
{"lineNum":"  378","line":"        self.lex_string(\"table\")?;","class":"lineCov","hits":"1","order":"4050","possible_hits":"1",},
{"lineNum":"  379","line":"        let table = self.lex_identifier()?;","class":"linePartCov","hits":"1","order":"4061","possible_hits":"2",},
{"lineNum":"  380","line":"        let columns = self.parse_column_pairs()?;","class":"linePartCov","hits":"2","order":"4271","possible_hits":"4",},
{"lineNum":"  381","line":"        Ok(Statement::CreateTable { table, columns })","class":"lineCov","hits":"1","order":"4415","possible_hits":"1",},
{"lineNum":"  382","line":"    }","class":"linePartCov","hits":"2","order":"4416","possible_hits":"4",},
{"lineNum":"  383","line":""},
{"lineNum":"  384","line":"    fn lex_value(&mut self) -> ParseResult<DBValue> {","class":"lineCov","hits":"1","order":"5051","possible_hits":"1",},
{"lineNum":"  385","line":"        self.skip_whitespace();","class":"lineCov","hits":"1","order":"5052","possible_hits":"1",},
{"lineNum":"  386","line":"        self.parse_integer()","class":"lineCov","hits":"2","order":"5053","possible_hits":"2",},
{"lineNum":"  387","line":"            .map(|int| DBValue::Integer(int))","class":"lineCov","hits":"2","order":"5140","possible_hits":"2",},
{"lineNum":"  388","line":"            .or_else(|e| {","class":"lineCov","hits":"2","order":"5141","possible_hits":"2",},
{"lineNum":"  389","line":"                e.ignore_fail()?;","class":"linePartCov","hits":"1","order":"5215","possible_hits":"2",},
{"lineNum":"  390","line":"                self.parse_text().map(|text| DBValue::Text(text))","class":"lineCov","hits":"3","order":"5216","possible_hits":"3",},
{"lineNum":"  391","line":"            })","class":"linePartCov","hits":"2","order":"5223","possible_hits":"3",},
{"lineNum":"  392","line":"    }","class":"linePartCov","hits":"1","order":"5142","possible_hits":"2",},
{"lineNum":"  393","line":""},
{"lineNum":"  394","line":"    fn parse_values(&mut self) -> ParseResult<Vec<DBValue>> {","class":"linePartCov","hits":"1","order":"5048","possible_hits":"2",},
{"lineNum":"  395","line":"        self.parse_left_paren()?;","class":"linePartCov","hits":"2","order":"5049","possible_hits":"3",},
{"lineNum":"  396","line":"        let value = self.lex_value()?;","class":"linePartCov","hits":"2","order":"5050","possible_hits":"3",},
{"lineNum":"  397","line":"        let mut columns = vec![value];","class":"lineCov","hits":"1","order":"5143","possible_hits":"1",},
{"lineNum":"  398","line":"        while let Ok(_) = self.lex_string(\",\") {","class":"lineCov","hits":"3","order":"5144","possible_hits":"3",},
{"lineNum":"  399","line":"            let ident = self.lex_value()?;","class":"linePartCov","hits":"1","order":"5305","possible_hits":"4",},
{"lineNum":"  400","line":"            columns.push(ident);","class":"lineCov","hits":"1","order":"5325","possible_hits":"1",},
{"lineNum":"  401","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  402","line":"        self.parse_right_paren()?;","class":"lineCov","hits":"2","order":"5145","possible_hits":"2",},
{"lineNum":"  403","line":"        Ok(columns)","class":"lineCov","hits":"1","order":"5146","possible_hits":"1",},
{"lineNum":"  404","line":"    }","class":"linePartCov","hits":"3","order":"5147","possible_hits":"7",},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"    fn parse_insert_into(&mut self) -> ParseResult<Statement> {","class":"linePartCov","hits":"1","order":"5042","possible_hits":"2",},
{"lineNum":"  407","line":"        self.lex_string(\"insert\")?;","class":"linePartCov","hits":"2","order":"5043","possible_hits":"3",},
{"lineNum":"  408","line":"        self.lex_string(\"into\")?;","class":"lineCov","hits":"1","order":"5044","possible_hits":"1",},
{"lineNum":"  409","line":"        let table = self.lex_identifier()?;","class":"linePartCov","hits":"1","order":"5045","possible_hits":"2",},
{"lineNum":"  410","line":"        self.lex_string(\"values\")?;","class":"lineCov","hits":"3","order":"5046","possible_hits":"3",},
{"lineNum":"  411","line":"        let values = self.parse_values().map_err(|e| {","class":"linePartCov","hits":"3","order":"5047","possible_hits":"4",},
{"lineNum":"  412","line":"            if let ParseError::FailedToLex = e {","class":"linePartCov","hits":"1","order":"5224","possible_hits":"2",},
{"lineNum":"  413","line":"                ParseError::InvalidValue","class":"lineCov","hits":"1","order":"5225","possible_hits":"1",},
{"lineNum":"  414","line":"            } else {"},
{"lineNum":"  415","line":"                e","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"            }"},
{"lineNum":"  417","line":"        })?;","class":"linePartCov","hits":"3","order":"5148","possible_hits":"5",},
{"lineNum":"  418","line":"        Ok(Statement::InsertInto { table, values })","class":"lineCov","hits":"1","order":"5149","possible_hits":"1",},
{"lineNum":"  419","line":"    }","class":"linePartCov","hits":"3","order":"5150","possible_hits":"4",},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"    fn parse_condition(&mut self) -> ParseResult<Condition> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  422","line":"        todo!();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  423","line":"    }"},
{"lineNum":"  424","line":"}"},
{"lineNum":"  425","line":""},
{"lineNum":"  426","line":"#[cfg(test)]"},
{"lineNum":"  427","line":"mod tests {"},
{"lineNum":"  428","line":"    use super::*;"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"    #[test]","class":"linePartCov","hits":"1","order":"5335","possible_hits":"2",},
{"lineNum":"  431","line":"    fn parse_select_with_single_column() {","class":"linePartCov","hits":"2","order":"5334","possible_hits":"3",},
{"lineNum":"  432","line":"        let stmt = Parser::new(\"select (col) from tbl;\").parse_command();","class":"lineCov","hits":"2","order":"5336","possible_hits":"2",},
{"lineNum":"  433","line":"        let select = Command::Statement(Statement::Select {","class":"lineCov","hits":"1","order":"5345","possible_hits":"1",},
{"lineNum":"  434","line":"            columns: vec![String::from(\"col\")],","class":"linePartCov","hits":"1","order":"5338","possible_hits":"2",},
{"lineNum":"  435","line":"            table: String::from(\"tbl\"),","class":"lineCov","hits":"1","order":"5342","possible_hits":"1",},
{"lineNum":"  436","line":"            condition: None,","class":"lineCov","hits":"1","order":"5344","possible_hits":"1",},
{"lineNum":"  437","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"        assert_eq!(stmt, Ok(select));","class":"lineCov","hits":"1","order":"5346","possible_hits":"1",},
{"lineNum":"  439","line":"    }","class":"linePartCov","hits":"1","order":"5366","possible_hits":"2",},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    #[test]","class":"linePartCov","hits":"1","order":"5339","possible_hits":"2",},
{"lineNum":"  442","line":"    fn parse_select_with_multiple_columns() {","class":"linePartCov","hits":"2","order":"5337","possible_hits":"3",},
{"lineNum":"  443","line":"        let stmt = Parser::new(\"select (col_1, col_2, col_3) from tbl;\").parse_command();","class":"lineCov","hits":"2","order":"5340","possible_hits":"2",},
{"lineNum":"  444","line":"        let select = Command::Statement(Statement::Select {","class":"lineCov","hits":"1","order":"5361","possible_hits":"1",},
{"lineNum":"  445","line":"            columns: vec![","class":"linePartCov","hits":"1","order":"5354","possible_hits":"3",},
{"lineNum":"  446","line":"                String::from(\"col_1\"),","class":"lineCov","hits":"1","order":"5355","possible_hits":"1",},
{"lineNum":"  447","line":"                String::from(\"col_2\"),","class":"lineCov","hits":"1","order":"5356","possible_hits":"1",},
{"lineNum":"  448","line":"                String::from(\"col_3\"),","class":"lineCov","hits":"1","order":"5357","possible_hits":"1",},
{"lineNum":"  449","line":"            ],"},
{"lineNum":"  450","line":"            table: String::from(\"tbl\"),","class":"lineCov","hits":"1","order":"5359","possible_hits":"1",},
{"lineNum":"  451","line":"            condition: None,","class":"lineCov","hits":"1","order":"5360","possible_hits":"1",},
{"lineNum":"  452","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"        assert_eq!(stmt, Ok(select));","class":"lineCov","hits":"1","order":"5362","possible_hits":"1",},
{"lineNum":"  454","line":"    }","class":"linePartCov","hits":"1","order":"5365","possible_hits":"2",},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"    #[test]","class":"linePartCov","hits":"1","order":"5166","possible_hits":"2",},
{"lineNum":"  457","line":"    fn parse_create_table_with_single_column() {","class":"linePartCov","hits":"2","order":"5165","possible_hits":"3",},
{"lineNum":"  458","line":"        let stmt = Parser::new(\"create table tbl (col integer);\").parse_command();","class":"lineCov","hits":"2","order":"5167","possible_hits":"2",},
{"lineNum":"  459","line":"        let create = Command::Statement(Statement::CreateTable {","class":"lineCov","hits":"1","order":"5170","possible_hits":"1",},
{"lineNum":"  460","line":"            table: String::from(\"tbl\"),","class":"lineCov","hits":"1","order":"5168","possible_hits":"1",},
{"lineNum":"  461","line":"            columns: vec![(String::from(\"col\"), DBType::Integer)],","class":"linePartCov","hits":"2","order":"5169","possible_hits":"3",},
{"lineNum":"  462","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"        assert_eq!(stmt, Ok(create));","class":"lineCov","hits":"1","order":"5171","possible_hits":"1",},
{"lineNum":"  464","line":"    }","class":"linePartCov","hits":"1","order":"5172","possible_hits":"2",},
{"lineNum":"  465","line":""},
{"lineNum":"  466","line":"    #[test]"},
{"lineNum":"  467","line":"    fn parse_create_table_with_multiple_columns() {","class":"linePartCov","hits":"3","order":"3806","possible_hits":"4",},
{"lineNum":"  468","line":"        let stmt = Parser::new(\"create table tbl (col_1 integer, col_2 text, col_3 text);\")","class":"lineCov","hits":"2","order":"3810","possible_hits":"2",},
{"lineNum":"  469","line":"            .parse_command();"},
{"lineNum":"  470","line":"        let create = Command::Statement(Statement::CreateTable {","class":"lineCov","hits":"1","order":"4434","possible_hits":"1",},
{"lineNum":"  471","line":"            table: String::from(\"tbl\"),","class":"lineCov","hits":"1","order":"4429","possible_hits":"1",},
{"lineNum":"  472","line":"            columns: vec![","class":"linePartCov","hits":"2","order":"4430","possible_hits":"5",},
{"lineNum":"  473","line":"                (String::from(\"col_1\"), DBType::Integer),","class":"lineCov","hits":"2","order":"4431","possible_hits":"2",},
{"lineNum":"  474","line":"                (String::from(\"col_2\"), DBType::Text),","class":"lineCov","hits":"2","order":"4432","possible_hits":"2",},
{"lineNum":"  475","line":"                (String::from(\"col_3\"), DBType::Text),","class":"lineCov","hits":"2","order":"4433","possible_hits":"2",},
{"lineNum":"  476","line":"            ],"},
{"lineNum":"  477","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"        assert_eq!(stmt, Ok(create));","class":"lineCov","hits":"1","order":"4435","possible_hits":"1",},
{"lineNum":"  479","line":"    }","class":"linePartCov","hits":"2","order":"4556","possible_hits":"4",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"    #[test]"},
{"lineNum":"  482","line":"    fn parse_insert_into_with_single_column() {","class":"linePartCov","hits":"3","order":"5257","possible_hits":"4",},
{"lineNum":"  483","line":"        let stmt = Parser::new(\"insert into tbl values (0);\").parse_command();","class":"lineCov","hits":"2","order":"5258","possible_hits":"2",},
{"lineNum":"  484","line":"        let insert = Command::Statement(Statement::InsertInto {","class":"lineCov","hits":"1","order":"5263","possible_hits":"1",},
{"lineNum":"  485","line":"            table: String::from(\"tbl\"),","class":"lineCov","hits":"1","order":"5259","possible_hits":"1",},
{"lineNum":"  486","line":"            values: vec![DBValue::Integer(0)],","class":"lineCov","hits":"1","order":"5262","possible_hits":"1",},
{"lineNum":"  487","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"        assert_eq!(stmt, Ok(insert));","class":"lineCov","hits":"1","order":"5265","possible_hits":"1",},
{"lineNum":"  489","line":"    }","class":"linePartCov","hits":"2","order":"5283","possible_hits":"4",},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"    #[test]","class":"linePartCov","hits":"1","order":"5303","possible_hits":"2",},
{"lineNum":"  492","line":"    fn parse_insert_into_with_multiple_columns() {","class":"linePartCov","hits":"2","order":"5302","possible_hits":"3",},
{"lineNum":"  493","line":"        let stmt = Parser::new(\"insert into tbl values (0, \'foo\', \'bar\');\").parse_command();","class":"lineCov","hits":"2","order":"5304","possible_hits":"2",},
{"lineNum":"  494","line":"        let insert = Command::Statement(Statement::InsertInto {","class":"lineCov","hits":"1","order":"5330","possible_hits":"1",},
{"lineNum":"  495","line":"            table: String::from(\"tbl\"),","class":"lineCov","hits":"1","order":"5326","possible_hits":"1",},
{"lineNum":"  496","line":"            values: vec![DBValue::Integer(0),","class":"linePartCov","hits":"2","order":"5327","possible_hits":"3",},
{"lineNum":"  497","line":"            DBValue::Text(String::from(\"foo\")),","class":"lineCov","hits":"2","order":"5328","possible_hits":"2",},
{"lineNum":"  498","line":"            DBValue::Text(String::from(\"bar\"))],","class":"lineCov","hits":"2","order":"5329","possible_hits":"2",},
{"lineNum":"  499","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":"        assert_eq!(stmt, Ok(insert));","class":"lineCov","hits":"1","order":"5331","possible_hits":"1",},
{"lineNum":"  501","line":"    }","class":"linePartCov","hits":"1","order":"5333","possible_hits":"2",},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"    #[test]","class":"lineCov","hits":"1","order":"5275","possible_hits":"1",},
{"lineNum":"  504","line":"    fn parse_meta_command_exit() {","class":"linePartCov","hits":"2","order":"5274","possible_hits":"3",},
{"lineNum":"  505","line":"        let cmd = Parser::new(\".exit\").parse_command();","class":"lineCov","hits":"2","order":"5276","possible_hits":"2",},
{"lineNum":"  506","line":"        let exit = Command::MetaCommand(MetaCommand::Exit);","class":"lineCov","hits":"1","order":"5278","possible_hits":"1",},
{"lineNum":"  507","line":"        assert_eq!(cmd, Ok(exit));","class":"linePartCov","hits":"1","order":"5279","possible_hits":"2",},
{"lineNum":"  508","line":"    }","class":"linePartCov","hits":"2","order":"5280","possible_hits":"4",},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"    #[test]","class":"lineCov","hits":"1","order":"5253","possible_hits":"1",},
{"lineNum":"  511","line":"    fn parse_meta_command_print() {","class":"linePartCov","hits":"3","order":"5252","possible_hits":"4",},
{"lineNum":"  512","line":"        let cmd = Parser::new(\".print\").parse_command();","class":"lineCov","hits":"2","order":"5254","possible_hits":"2",},
{"lineNum":"  513","line":"        let print = Command::MetaCommand(MetaCommand::Print);","class":"lineCov","hits":"1","order":"5269","possible_hits":"1",},
{"lineNum":"  514","line":"        assert_eq!(cmd, Ok(print));","class":"linePartCov","hits":"1","order":"5270","possible_hits":"2",},
{"lineNum":"  515","line":"    }","class":"linePartCov","hits":"2","order":"5273","possible_hits":"4",},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"    #[test]"},
{"lineNum":"  518","line":"    fn invalid_identifier_error() {","class":"linePartCov","hits":"3","order":"3809","possible_hits":"4",},
{"lineNum":"  519","line":"        let number = Parser::new(\"select (0) from tbl;\").parse_command();","class":"lineCov","hits":"2","order":"3813","possible_hits":"2",},
{"lineNum":"  520","line":"        let symbol = Parser::new(\"create table & (col integer);\").parse_command();","class":"lineCov","hits":"1","order":"5244","possible_hits":"1",},
{"lineNum":"  521","line":"        let underscore = Parser::new(\"insert into _ (0);\").parse_command();","class":"lineCov","hits":"1","order":"5245","possible_hits":"1",},
{"lineNum":"  522","line":"        assert_eq!(number, Err(ParseError::InvalidIdentifier));","class":"linePartCov","hits":"1","order":"5246","possible_hits":"2",},
{"lineNum":"  523","line":"        assert_eq!(symbol, Err(ParseError::InvalidIdentifier));","class":"linePartCov","hits":"2","order":"5247","possible_hits":"3",},
{"lineNum":"  524","line":"        assert_eq!(underscore, Err(ParseError::InvalidIdentifier));","class":"linePartCov","hits":"2","order":"5248","possible_hits":"3",},
{"lineNum":"  525","line":"    }","class":"linePartCov","hits":"3","order":"5249","possible_hits":"7",},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"    #[test]"},
{"lineNum":"  528","line":"    fn invalid_value_error() {","class":"linePartCov","hits":"3","order":"3808","possible_hits":"4",},
{"lineNum":"  529","line":"        let underscore = Parser::new(\"insert into tbl values (_);\").parse_command();","class":"lineCov","hits":"2","order":"3812","possible_hits":"2",},
{"lineNum":"  530","line":"        let nil = Parser::new(\"insert into tbl values ();\").parse_command();","class":"lineCov","hits":"1","order":"5229","possible_hits":"1",},
{"lineNum":"  531","line":"        let bare_string = Parser::new(\"insert into tbl values (foo);\").parse_command();","class":"lineCov","hits":"1","order":"5230","possible_hits":"1",},
{"lineNum":"  532","line":"        let dash = Parser::new(\"insert into tbl values (-);\").parse_command();","class":"lineCov","hits":"1","order":"5231","possible_hits":"1",},
{"lineNum":"  533","line":"        assert_eq!(underscore, Err(ParseError::InvalidValue));","class":"linePartCov","hits":"1","order":"5235","possible_hits":"2",},
{"lineNum":"  534","line":"        assert_eq!(nil, Err(ParseError::InvalidValue));","class":"linePartCov","hits":"2","order":"5236","possible_hits":"3",},
{"lineNum":"  535","line":"        assert_eq!(bare_string, Err(ParseError::InvalidValue));","class":"linePartCov","hits":"2","order":"5237","possible_hits":"3",},
{"lineNum":"  536","line":"        assert_eq!(dash, Err(ParseError::InvalidValue));","class":"linePartCov","hits":"2","order":"5238","possible_hits":"3",},
{"lineNum":"  537","line":"    }","class":"linePartCov","hits":"3","order":"5239","possible_hits":"8",},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"    #[test]"},
{"lineNum":"  540","line":"    fn missing_semicolon_error() {","class":"linePartCov","hits":"3","order":"3807","possible_hits":"4",},
{"lineNum":"  541","line":"        let stmt_select = Parser::new(\"select (col) from tbl\").parse_command();","class":"lineCov","hits":"2","order":"3811","possible_hits":"2",},
{"lineNum":"  542","line":"        let stmt_create = Parser::new(\"create table tbl (col integer)\").parse_command();","class":"lineCov","hits":"1","order":"5038","possible_hits":"1",},
{"lineNum":"  543","line":"        let stmt_insert = Parser::new(\"insert into tbl values (0)\").parse_command();","class":"lineCov","hits":"1","order":"5039","possible_hits":"1",},
{"lineNum":"  544","line":"        assert_eq!(stmt_select, Err(ParseError::MissingSemicolon));","class":"linePartCov","hits":"1","order":"5189","possible_hits":"2",},
{"lineNum":"  545","line":"        assert_eq!(stmt_create, Err(ParseError::MissingSemicolon));","class":"linePartCov","hits":"2","order":"5192","possible_hits":"3",},
{"lineNum":"  546","line":"        assert_eq!(stmt_insert, Err(ParseError::MissingSemicolon));","class":"linePartCov","hits":"2","order":"5193","possible_hits":"3",},
{"lineNum":"  547","line":"    }","class":"linePartCov","hits":"3","order":"5194","possible_hits":"7",},
{"lineNum":"  548","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "juicydb-1d8354ed6feb9cd7", "date" : "2020-04-17 23:00:57", "instrumented" : 385, "covered" : 308,};
var merged_data = [];
