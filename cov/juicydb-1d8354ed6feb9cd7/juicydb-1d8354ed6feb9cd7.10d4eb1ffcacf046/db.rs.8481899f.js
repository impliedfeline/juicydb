var data = {lines:[
{"lineNum":"    1","line":"use std::rc::Rc;"},
{"lineNum":"    2","line":"use std::collections::BTreeMap;"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"/// Conceptually, a [`Database`] is a collection of [`Table`]s, a [`Table`] is a collection of"},
{"lineNum":"    5","line":"/// [`Row`]s and a [`Row`] is a collection of supported values with some means of indexing the"},
{"lineNum":"    6","line":"/// values based on the column identifier"},
{"lineNum":"    7","line":"pub struct Database {"},
{"lineNum":"    8","line":"    name: String,"},
{"lineNum":"    9","line":"    tables: Vec<(String, Table)>,"},
{"lineNum":"   10","line":"}"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"impl Database {"},
{"lineNum":"   13","line":"    pub fn get_table(&mut self, id: &str) -> Option<&mut Table> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   14","line":"        for (name, table) in &mut self.tables {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   15","line":"            if name == id { return Some(table) }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   16","line":"        }"},
{"lineNum":"   17","line":"        None","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   18","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"// TODO: support indexing with B-trees"},
{"lineNum":"   22","line":"pub struct Table {"},
{"lineNum":"   23","line":"    schema: Vec<(String, DBType)>,"},
{"lineNum":"   24","line":"    rows: Vec<Rc<Row>>,"},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"impl Table {"},
{"lineNum":"   28","line":"    pub fn get_column_type(&self, id: &str) -> Option<DBType> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"        for (name, db_type) in &self.schema {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   30","line":"            if name == id { return Some(*db_type) }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   31","line":"        }"},
{"lineNum":"   32","line":"        None","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    pub fn rows(&mut self) -> &mut Vec<Rc<Row>> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"        &mut self.rows","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   38","line":"}"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub struct Index(BTreeMap<DBValue, Rc<Row>>);"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"pub struct Row {"},
{"lineNum":"   43","line":"    values: Vec<(String, DBValue)>,"},
{"lineNum":"   44","line":"}"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"impl Row {"},
{"lineNum":"   47","line":"    pub fn get(&mut self, column: &str) -> Option<&mut DBValue> {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"        for (name, value) in &mut self.values {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   49","line":"            if name == column { return Some(value) }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   50","line":"        }"},
{"lineNum":"   51","line":"        None","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":"}"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"#[derive(Clone,Copy,Debug,PartialEq)]","class":"linePartCov","hits":"2","order":"4515","possible_hits":"6",},
{"lineNum":"   56","line":"pub enum DBType {"},
{"lineNum":"   57","line":"    Integer,"},
{"lineNum":"   58","line":"    Text,"},
{"lineNum":"   59","line":"}"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"#[derive(Clone,Debug,PartialEq)]","class":"linePartCov","hits":"3","order":"5281","possible_hits":"17",},
{"lineNum":"   62","line":"pub enum DBValue {"},
{"lineNum":"   63","line":"    Integer(i64),","class":"linePartCov","hits":"1","order":"5282","possible_hits":"4",},
{"lineNum":"   64","line":"    Text(String),","class":"linePartCov","hits":"1","order":"5332","possible_hits":"5",},
{"lineNum":"   65","line":"}"},
{"lineNum":"   66","line":""},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "juicydb-1d8354ed6feb9cd7", "date" : "2020-04-17 23:00:57", "instrumented" : 22, "covered" : 4,};
var merged_data = [];
